{"version":3,"sources":["Tile.js","Tiles.js","reportWebVitals.js","index.js"],"names":["Tile","props","class","result","$","require","withRouter","symbolArgs","URLSearchParams","location","search","get","useState","error","setError","isLoaded","setIsLoaded","setResult","settings","useEffect","ajax","done","response","console","log","fail","message","resultRows","i","length","end","push","slice","map","results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","exact","path","component","Tiles","document","getElementById"],"mappings":"sPAwBeA,MArBf,SAAcC,GACZ,OACE,qBAAKC,MAAM,YAAX,SACE,0BAASA,MAAM,wCAAf,UACE,mBAAGA,MAAM,QAAT,SAAkBD,EAAME,OAAN,WAClB,oBAAGD,MAAM,WAAT,UAAqBD,EAAME,OAAN,OAArB,KAA+CF,EAAME,OAAN,oBAC/C,oBAAGD,MAAM,WAAT,mBACA,sBAAKA,MAAM,UAAX,UACCD,EAAME,OAAN,mBAAoCF,EAAME,OAAN,eAGrC,oBAAGD,MAAM,WAAT,0BACE,sBAAKA,MAAM,UAAX,mBACSD,EAAME,OAAN,gBAAiCF,EAAME,OAAN,SAAyB,uBADnE,QAEQF,EAAME,OAAN,eAAgCF,EAAME,OAAN,qBCX9CC,EAAIC,EAAQ,IAgEDC,mBA9Df,SAAeL,GACb,IAAMM,EAAa,IAAIC,gBAAgBP,EAAMQ,SAASC,QAAQC,IAAI,WAD9C,EAEMC,mBAAS,MAFf,mBAEbC,EAFa,KAENC,EAFM,OAGYF,oBAAS,GAHrB,mBAGbG,EAHa,KAGHC,EAHG,OAIQJ,mBAAS,IAJjB,mBAIbT,EAJa,KAILc,EAJK,KAKdC,EAAW,CACf,OAAS,EACT,aAAe,EACf,IAAO,gFAAgFX,EACvF,OAAU,MACV,QAAW,CACT,kBAAmB,0CACnB,iBAAkB,uDAetB,GAXAY,qBAAU,WACRf,EAAEgB,KAAKF,GAAUG,MAAK,SAAUC,GAC9BN,GAAY,GACZO,QAAQC,IAAIF,GACZL,EAAUK,EAAQ,cAAR,WACTG,MAAK,SAAUZ,GAChBG,GAAY,GACZF,EAASD,QAEV,IAECA,EACF,OAAO,0CAAaA,EAAMa,WACrB,GAAKX,EAEL,CAEL,IADA,IAAIY,EAAa,GACRC,EAAI,EAAGA,EAAIzB,EAAO0B,OAAQD,GAAI,EAAG,CACxC,IAAIE,EAAMF,EAAI,EACVE,EAAM3B,EAAO0B,SACfC,EAAM3B,EAAO0B,QAEfF,EAAWI,KACT5B,EAAO6B,MAAMJ,EAAGE,IAIpB,OADAP,QAAQC,IAAIrB,GAEV,8BAEEwB,EAAWM,KAAI,SAACC,GACd,OACE,qBAAKhC,MAAM,kBAAX,SAEIgC,EAAQD,KAAI,SAAC9B,GACX,OAAQ,cAAC,EAAD,CAAMA,OAAQA,cArBpC,OAAO,gDC1BIgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,SAAUC,UAAzB,SACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,QAGrCC,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.12bf788f.chunk.js","sourcesContent":["//import logo from './logo.svg';\n//import './App.css';\n\nfunction Tile(props) {\n  return (\n    <div class=\"tile is-4\">\n      <article class=\"tile is-child notification is-primary\">\n        <p class=\"title\">{props.result['longName']}</p>\n        <p class=\"subtitle\">{props.result['symbol']}, {props.result['fullExchangeName']}</p>\n        <p class=\"subtitle\">Price:\n        <div class=\"content\">\n        {props.result['regularMarketPrice']}{props.result['currency']}\n        </div>\n        </p>\n        <p class=\"subtitle\">Target Price: \n          <div class=\"content\">\n            High: {props.result['targetPriceHigh']}{props.result['currency']}<br/>\n            Low: {props.result['targetPriceLow']}{props.result['currency']}\n          </div>\n        </p>\n      </article>\n    </div>);\n}\n\nexport default Tile;\n","//import logo from './logo.svg';\nimport './Tiles.css';\nimport Tile from './Tile.js';\nimport { withRouter } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\n\nvar $ = require('jquery');\n\nfunction Tiles(props) {\n  const symbolArgs = new URLSearchParams(props.location.search).get('symbols');\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [result, setResult] = useState([]);\n  const settings = {\n    \"async\": true,\n    \"crossDomain\": true,\n    \"url\": \"https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes?symbols=\"+symbolArgs,\n    \"method\": \"GET\",\n    \"headers\": {\n      \"x-rapidapi-host\": \"apidojo-yahoo-finance-v1.p.rapidapi.com\",\n      \"x-rapidapi-key\": \"de40c01ca1mshebfd6541116a023p185831jsn793176dff3dc\"\n    }\n  }\n  \n  useEffect(() => {\n    $.ajax(settings).done(function (response) {\n      setIsLoaded(true);\n      console.log(response);\n      setResult(response['quoteResponse']['result']);\n    }).fail(function (error) {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    let resultRows = [];\n    for (let i = 0; i < result.length; i=i+3) {\n      let end = i + 3;\n      if (end > result.length) {\n        end = result.length\n      }\n      resultRows.push(\n        result.slice(i, end)\n      )\n    }\n    console.log(result);\n    return (\n      <div>\n      {\n        resultRows.map((results) => {\n          return (\n            <div class=\"tile is-horizon\">\n              { \n                results.map((result) => {\n                  return (<Tile result={result} />)\n                }) \n              }\n            </div>\n          )})\n        }\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Tiles);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport Tiles from './Tiles';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Route exact path='/' component={Tiles}/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}